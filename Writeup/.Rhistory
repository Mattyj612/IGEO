unique() %>%
pull()
) %>%
arrange(arc_curve, desc(geo_curve))
View(curvature_df)
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
arrange(arc_curve) %>%
arrange(geo_curve)
View(curvature_df)
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
arrange(geo_curve, arc_curve)
View(curvature_df)
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
order()
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(arc_curve = arrange(arc_curve))
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(arc_curve = order(arc_curve))
View(curvature_df)
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(arc_curve = arc_curve[order(arc_curve)])
View(curvature_df)
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(
arc_curve = arc_curve[order(arc_curve)],
geo_curve = geo_curve[order(geo_curve)]
)
View(curvature_df)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
packages <- c("tidyverse", "magrittr", "knitr", "broom", "ggsignif", "lme4",
"effects", "devtools", "gtools", "ggthemes", "emmeans", "ggsignif",
"pracma", "reghelper", "Directional")
install <- function(package){
is_installed <- package %in% installed.packages()
if (!is_installed) {
install.packages(package, repos = "http://cran.us.r-project.org",
dependencies = TRUE, quiet = TRUE)
}
sapply(package, require, character.only = TRUE)
}
suppressWarnings(invisible(lapply(packages, install)))
source("code/all_IGEO_specifications.R")
source("code/IGEO_Summary_Helper.R")
kid_data <- list.files("data/Kid_IGEO_Results") %>%
str_c("data/Kid_IGEO_Results/", .) %>%
map_dfr(
.x = .,
.f = read_csv,
col_types = cols()
) %>%
set_names(
x = .,
nm = c("image", "trial", "correct_ans", "condition", "random",
"given_ans", "response", "reaction_time", "subject_no")
) %>%
mutate(
spherical = str_sub(condition, 1, 3),
planar = str_extract(condition, "curve|line"),
surface = str_extract(condition, "sphere|plane")
) %>%
mutate_at(
.vars = c("subject_no", "response", "spherical",
"planar", "surface", "correct_ans", "given_ans"),
.funs = factor
) %>%
mutate(
response = factor(response, labels = c("incorrect", "correct"))
) %>%
select(subject_no, trial, image, surface, planar, spherical, response,
reaction_time, correct_ans, given_ans) %>%
arrange(surface, desc(planar), desc(spherical))
# Get the info about size, separation, pull, spin
kid_data %<>%
mutate(image_stripped = str_remove_all(image,
"gPlane_|Plane_|Sphere_|gSphere_|_.jpg")) %>%
separate(
col = image_stripped,
into = c("size", "separation", "pull", "spin"),
sep = "_",
remove = TRUE
) %>%
mutate(pull = str_replace(pull, fixed("(Neg)"), "-")) %>%
mutate_at(
.vars = c("size", "separation", "pull", "spin"),
.funs = as.numeric
)
# Load into the data the specifics about the height,
# line length, rotation angle, etc.
kid_data %<>%
mutate(
pull = replace_na(pull, 0),
point_sep_rad = point_sep_rad(separation),
rotation_angle = case_when(
planar == "line" & spherical == "arc" ~ 0,
TRUE ~ pmap(
.l = list(size, separation, pull, spin),
.f = rot_angle
) %>% unlist()
),
height = by_case(
col_1 = planar, col_2 = spherical,
gl = 0,
gc = pmap(.l = list(size, separation, pull), .f = height_gc) %>% unlist(),
al = map2(.x = size, .y = pull, .f = height_al) %>% unlist(),
ac = pmap(.l = list(size, separation, pull, spin), .f = height_ac) %>% unlist()
),
height = abs(height)/radius(size),
line_length = by_case(
col_1 = planar, col_2 = spherical,
gl = map2(.x = size, .y = separation, .f = length_gl) %>% unlist(),
gc = map2(.x = size, .y = separation, .f = length_gc) %>% unlist(),
al = pmap(.l = list(size, separation, pull), .f = length_al) %>% unlist(),
ac = pmap(.l = list(size, separation, pull), .f = length_ac) %>% unlist()
),
curvature = by_case(
col_1 = planar, col_2 = spherical,
gl = 0,
gc = pmap(.l = list(size, separation, pull), .f = curvature_gc) %>% unlist(),
al = 0,
ac = pmap(.l = list(size, separation, pull, spin), .f = curvature_ac) %>% unlist()
)
) %>%
filter(!is.na(response)) %>%
select(everything(), response, reaction_time)
write_csv(x = kid_data, path = "data/kid_data.csv")
num_trials <- kid_data %>% nrow()
# Get the overall correct proportion
all_trials <- kid_data %>%
group_by(response) %>%
summarise(
count = n(),
percentage = str_c(100*round(count/(num_trials), 3), "%")
)
# Summarize
all_trials %>%
kable(.)
# Break results down by category
kid_descriptives <- kid_data %>%
mutate(response = as.numeric(response) - 1) %>%
group_by(surface, spherical, planar) %>%
summarise(percentage_correct = mean(response)) %>%
mutate(condition = sprintf("%s_%s_%s", surface, spherical, planar)) %>%
select(everything()) %>%
ungroup() %>%
arrange(surface, desc(planar), desc(spherical))
# Summarize
kid_descriptives %>%
select(condition, percentage_correct) %>%
kable(.)
my_labs <- function(){
labs(
x = "Surface",
y = "Proportion Correct",
fill = " ",
title = "Descriptives"
)
}
kid_descriptives %>%
mutate(
condition = sprintf("%s %s", str_to_title(spherical), str_to_title(planar)),
condition = factor(condition, levels = unique(condition))
) %>%
ggplot(data = .,
aes(x = str_to_title(surface), y = percentage_correct, fill = condition)) +
geom_bar(position = position_dodge(width = NULL), stat = "identity") +
my_labs() + IGEO_theme() + IGEO_fill()
# All trials together
model_above_chance <- kid_data %>%
glmer(
data = .,
response ~ (1 | subject_no),
family = binomial(link = "logit")
)
# Take a look
model_above_chance %>%
tidy() %>%
filter(term == "(Intercept)") %>%
mutate(term = "Intercept") %>%
mutate(
p_value = "0.0000",
p_value_clean = clean_p_val(p.value),
p_value_star = stars.pval(p.value)
) %>%
rename(
"std_error" = std.error,
"log_odds" = estimate
) %>%
select(-p.value, -group) %>%
kable(.)
# Split up by category
model_above_chance_split <- kid_data %>%
group_by(surface, spherical, planar) %>%
do(
above_chance = glmer(
data = .,
response ~ (1 | subject_no),
family = binomial(link = "logit")
)
)
# Look at results
model_above_chance_split %>%
tidy(above_chance, conf.int = TRUE) %>%
ungroup() %>%
filter(term == "(Intercept)") %>%
mutate(
p_value = round(p.value, 4),
p_value_clean = clean_p_val(p.value),
p_value_star = gtools::stars.pval(p_value),
condition = sprintf("%s_%s_%s", surface, spherical, planar)
) %>%
arrange(surface, desc(planar), desc(spherical)) %>%
mutate(probability = 1/(1 + exp(-estimate))) %>%
rename(
"std_error" = std.error,
"log_odds" = estimate,
"conf_lower" = conf.low,
"conf_upper" = conf.high
) %>%
select(condition, everything(), -term, -surface, -planar,
-spherical, -group, -p.value) %>%
kable(.)
model_1 <- glmer(
data = kid_data,
formula = response ~ surface * planar * spherical + (1 + surface + planar | subject_no),
family = binomial(link = "logit")
)
# Show the results
clean_IGEO_model(
model = model_1,
col_names = c("Intercept", "Surface", "Planar", "Spherical",
"Surface x Planar", "Surface x Spherical", "Planar x Spherical",
"Surface x Planar x Spherical")
)
# Estimated Marginal Means
model_1_predicted <- emmeans(
object = model_1,
specs = ~ surface * planar * spherical ,
type = "response"
)
model_1_predicted_clean <- clean_IGEO_emmeans(model_1_predicted)
model_1_predicted_clean %>%
kable()
my_labs <- function(){
labs(
x = "Surface",
y = "Predicted Proportion Correct",
fill = " ",
title = "Model 1 Predictions"
)
}
model_1_plot <- model_1_predicted_clean %>%
mutate(
condition = sprintf("%s %s", str_to_title(spherical), str_to_title(planar)),
condition = factor(condition, levels = unique(condition))
) %>%
ggplot(data = ., aes(x = str_to_title(surface), y = probability, fill = condition)) +
geom_bar(position = position_dodge(width = NULL), stat = "identity") +
geom_errorbar(aes(ymin = conf_lower, ymax = conf_upper),
position = position_dodge(0.9), width = 0.2, size = 0.4) +
my_labs() + IGEO_theme() + IGEO_fill()
model_1_plot
# Compute contrasts
contrast(
object = model_1_predicted,
by = c("surface"),
method = "pairwise",
adjust = "holm"
) %>%
clean_IGEO_contrasts()
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(
arc_curve = arc_curve[order(arc_curve)],
geo_curve = geo_curve[order(geo_curve)]
)
kid_data %>%
filter(planar == "curve",) %>%
group_by(spherical) %>%
summarize(
mean_curvature = round(100*mean(curvature), 3),
max_curvature = round(100*max(curvature), 3),
min_curvature = round(100*min(curvature), 3),
sd_curvature = round(100*sd(curvature), 3)
)
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(
arc_curve = arc_curve[order(arc_curve)],
geo_curve = geo_curve[order(geo_curve)]
)
kid_data %>%
filter(planar == "curve") %>%
group_by(spherical) %>%
summarize(
mean_curvature = round(100*mean(curvature), 3),
max_curvature = round(100*max(curvature), 3),
min_curvature = round(100*min(curvature), 3),
sd_curvature = round(100*sd(curvature), 3)
)
curvature_df %>%
kable()
kid_data %>%
filter(planar == "curve") %>%
group_by(spherical) %>%
summarize(
mean_curvature = round(100*mean(curvature), 3),
max_curvature = round(100*max(curvature), 3),
min_curvature = round(100*min(curvature), 3),
sd_curvature = round(100*sd(curvature), 3)
) %>%
kable()
curvature_df <- tibble(
arc_curve = kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
unique() %>%
pull(),
geo_curve = kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
unique() %>%
pull()
) %>%
mutate(
arc_curve = arc_curve[order(arc_curve)],
geo_curve = geo_curve[order(geo_curve)]
)
curvature_df %>%
kable()
kid_data %>%
filter(planar == "curve") %>%
group_by(spherical) %>%
summarize(
mean_curvature = round(100*mean(curvature), 3),
max_curvature = round(100*max(curvature), 3),
min_curvature = round(100*min(curvature), 3),
sd_curvature = round(100*sd(curvature), 3)
) %>%
kable()
arc_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
arrange() %>%
unique() %>%
pull()
geo_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
arrange() %>%
unique() %>%
pull()
curvature_df <- tibble(
arc_curve = arc_curve_data,
geo_curve = geo_curve_data
)
curvature_df %>%
kable()
kid_data %>%
filter(planar == "curve") %>%
group_by(spherical) %>%
summarize(
mean_curvature = round(100*mean(curvature), 3),
max_curvature = round(100*max(curvature), 3),
min_curvature = round(100*min(curvature), 3),
sd_curvature = round(100*sd(curvature), 3)
) %>%
kable()
arc_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
arrange()
arc_curve_data
arc_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
arrange(curvature)
arc_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
arrange(curvature) %>%
unique()
arc_curve_data
arc_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
arrange(curvature) %>%
unique() %>%
pull()
arc_curve_data
arc_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "arc") %>%
select(curvature) %>%
arrange(curvature) %>%
unique() %>%
pull()
geo_curve_data <- kid_data %>%
filter(planar == "curve", spherical == "geo") %>%
select(curvature) %>%
arrange(curvature) %>%
unique() %>%
pull()
curvature_df <- tibble(
arc_curve = arc_curve_data,
geo_curve = geo_curve_data
)
curvature_df %>%
kable()
View(curvature_df)
curvature_df
curvature_df %>%
kable()
